<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on 菜鸡实验室</title>
    <link>/</link>
    <description>Recent content in Home on 菜鸡实验室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Jan 2022 13:51:00 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2021总结</title>
      <link>/post/2021-summary/</link>
      <pubDate>Sun, 02 Jan 2022 13:51:00 +0800</pubDate>
      
      <guid>/post/2021-summary/</guid>
      <description>开篇 捡起文字技能，有种恍如隔世的感觉。
我读书以来就是理科班里的文科小子，其实这并不是说我对文科有种特殊的喜好，只是那时候的我给自己的要求就是文理全面发展。以至于到现在，我对文字精炼程度的追求还甚于某些天天拿笔的小编，尽管我现在从事着码农的工作。
但是进入社会，我才意识到「表达」真正占据的地位和意义，在这个年轻时代，写点东西并不仅仅是某些中二青少年的专属，而是新社会的人类所必备的一项技能。
扯远了。话说回来，2021年我重新开始思考人生，或许这是对于奔三的灵魂来说一个必经之路，但是波澜不惊的一年确实让我整个人发生了潜移默化的改变。
一·去他的互联网 都说上班以后的的第一份工作会伴随一生，在我的身上还真应验了。4月份辞了原来的外包工作，跌跌撞撞的求职过后，进入了本来不太愿意的一个行业——车联网。在持续在汽车行业混了好几年之后，我也回到了原点。年轻时感觉互联网行业各种高大上，「新思维、开放、年轻化」听起来各种牛逼，不过到了现在这家公司发现，他也有自己独特的一面：
技术方面既有自己手撸的陈年屎山，也有使用最前沿、最新热门框架的玩意，甚至我看到了鸿蒙相关的东西已经搞了一年多了，服务端开始用kotlin。
项目管理方面也是紧贴外企，或许和我们的甲方是德企有关，英文邮件、翔实的流程图、完整的测试用例、技术售前的工作风格，让我这个非科班的泥腿子觉得，似乎这也是以后能混饭吃的凭借点。不过感觉这跟我2020一整年研究新能车资本市场是否有关，我就不得而知了。
至于目标，在有了更多时间学习、听播客之后，虽然暂时没有定下来今后20年的路，不过受外企风格影响，开始涉足medium、Stack Overflow、领英等偏向国际化的站点。似乎感觉自己和刚出社会的毛头小子拉开了差距 实际上还是要学习一个
二·在线跑毒 本以为疫情稳定下来了，于是躁动的心又开始了，约上朋友去新疆玩。刚去了没两天，新疆疫情爆发……当时朋友紧张的不行，非要连夜赶回来，我也就一起回来了。
途中真是与时间赛跑，先是天还没亮就直奔机场，然后机场值机差点就没给过。后面又是转机到太原，再到南京，中途还要看行程码、签字表示你是没有感染的，才能放行。我深知自己的毒奶体质，全程忍着没打开一个群，有些比较熟的群友纷纷表示我是不是被困在新疆了。当我坐上从南京开往上海的动车，我才敢稍微说上一句话：“闭嘴，爷在跑毒”。
最终的结果当然是有惊无险了，就是可惜了小亏一点交通费，以及没玩的尽兴。不过有一说一景点确实不错，我们就去了天山，山上空气很好，风景也挺好，那天恰好是下完雪开始融化的时候。下次有机会去一下没去成的吐鲁番什么的。
三·卖身契 其实一开始我是拒绝的，我的想法是提前半年到一年让家人帮我多跑跑多看看房，到了资格快满的时候就差不多定下来，这样第一可以充分的看完很多房子，第二不用那么急也不会被销售牵着鼻子走。可我家人并不理解，他们在之前我好说歹说的时候屁股不挪一步，到了我资格快满的时候就催着我快去长沙一起看，甚至想让我一周看完就定下来。这也明显是被销售忽悠了说在不上车就来不及了。不过在我的努力拉扯下好歹也是花了满满的5天去看，再加上关键时刻我之前联系的一个表哥也帮忙带着我们去看，最后的结果大家都还算满意吧。
四·口音和思维的脱轨 人在魔都呆久了，家乡话也说不利索了，尤其在相亲的时候，用家乡话和妹子交流，那叫一个难受。经过这么多年我确实是得出结论，我们这里的家乡话并不适合表达比较高级的词汇和意思，我平时在颅内自语和头脑风暴的时候也是以普通话口音说的。但是面对老乡，说普通话又太显生分，说家乡话感觉整个人都变得笨比了起来，这不会被妹子看不起吧……虽然最终还是没成，但是我已经开始思考今后更多的相亲应该怎么说话了。害，以后多练练吧
五·经典环节 · 治牙
· 社交、写作、表达
· 锻炼
· 学技术，混饭吃</description>
    </item>
    
    <item>
      <title>对鸿蒙系统的一点理解</title>
      <link>/post/understanding-harmonyos/</link>
      <pubDate>Tue, 08 Jun 2021 11:15:47 +0800</pubDate>
      
      <guid>/post/understanding-harmonyos/</guid>
      <description>前言 鸿蒙火了，无论是技术意义上的还是商业意义上的。连平时不关注数码圈的朋友都开始逼逼。有人支持有人反对，但是很多人都只是盲目的支持或反对。这两天陆续有一些够资格的人写出了真正的干货来证明华为的价值，但是我还是希望以个人的视角来记录一下自己的理解，另外谈谈拥抱鸿蒙这个课题，说不定新的风口就能让我赚到钱呢。
对鸿蒙本身的理解 首先贴出我认为比较简洁而可信的一篇文章在这里： https://mp.weixin.qq.com/s/F81EIbnOpUvkDqK1hvvTIw ，这篇文章的核心思想：
1. 第一版的鸿蒙=LiteOS，现在版本的鸿蒙=各平台OS的合集，LiteOS只是其中之一，而手机平台则是AOSP套皮（套皮这个词可能比较粗暴，但是意思差不多）
2. 第一版的宣传就是LiteOS=鸿蒙操作系统，现在版本的宣传把鸿蒙打造成了一个生态圈，不仅仅是单个的操作系统。这相当于从文字上重新定义了“操作系统”这个词，其实他要表达（宣传）的就是生态圈。我们对这样的宣传话术有些不满。
3. 鸿蒙的特性或者说优势：万物互联。李楠的视频里说了，使用了模改的通讯协议+超级小程序，实现跨设备的能力调用。这个特性在全家桶的情况下会越来越厉害，但是单一或者少数设备的时候就跟普通安卓没啥区别。所以鸿蒙需要将其打造成一个开源项目，来给更多厂商接入，而一旦成功，华为就跟谷歌一样成为了话语权把握者。
4. 华为的困境，导致他不得不去做这个选择。另外现在的代码很简陋，这也是因为时间紧迫的原因，等生态积累起来代码会越来越健壮。
万物互联的前景？ 让我觉得有趣的是，万物互联这个特性到底能带来多少惊喜？对于“超级小程序”和“跨设备能力调用”这样的词汇，我虽然已经理解他的意思，但是不免也会对他的前景打一个问号。
在2015-2019年小米生态链积累的时候，小米用纯安卓的东西已经慢慢把盘子铺开了，现在用手机控制空调、音箱、路由器等设备已经是比较常见的做法了，不知道华为能做到什么程度。
但是作为框架和协议的制定者我依然觉得华为很厉害，将代码开源并捐献给开放原子开源基金会，这样已经是最大限度的贡献了。大家都知道开源项目要成功的三大要素：大公司背书、活跃的生态和社区、杀手级应用。其中第一点已经有了，第二点会越来越好，第三点正在路上：华为自家的产品逐步更新支持。
厂商的前景？ 至于最近一些蹭热度宣布支持鸿蒙系统的软件、硬件和APP，我觉得他们的存在也不是没有意义，起码可以活跃社区，贡献一些开发的经验。但是很多实际上是没有互联的需求的。比如一个很普通的社交app，这是没必要和其他设备互联的（最多用音箱播放一下消息提醒？或者用一句话唤起app进入聊天界面？）。
某些购物、金融、出行类app，确实有这样的需求，可以在手机上占据一个小卡片的位置。但是问题是手机屏幕始终是有限的，卡片的优先级最后还是取决于APP本身用户的基数和活跃度——也就是用户是否愿意用你的APP本体，而不是看你是否支持鸿蒙。所以我觉得对于主战场在手机上的应用，还是会发挥马太效应，最终只有几个巨头会胜出。另外某些为了KPI不要马的厂商可能会因为滥用的情况，反而让所有人唾弃，这就看鸿蒙本身的约束力了。
华为的活路 鸿蒙的主战场在手机以外的设备。除了目前比较流行的手表、音箱、路由器、家电等设备，我个人觉得比较有前景的几个方向有：
1. 车机。众所周知华为要造车，这个车机和其他设备的互联能力肯定会成为一个发展方向。华为自家的车机第一是起到一个试验田的作用，能反哺鸿蒙系统的生态，第二也是他们盈利的一个点。期待表现。
2. 视觉设备，如VR、AR、眼镜等。我觉得在泛娱乐领域华为可能没有基因，但是不妨碍他们以设备及其系统切入。小时候看的七龙珠里，贝吉塔的战术目镜，我觉得是一个方向。眼镜是除了手机、手表、耳机之外占比最大的便携式设备，如果有一个智能化的场景，那是会被疯狂挖掘的。另外普通的娱乐VR、AR设备配合5G时代的云游戏，也有一点搞头。
3. 家电。我为什么把家电排在后面，是因为这些年其他友商已经在发力了，华为不太可能直接占据一席之地，最有可能的情况是利用鸿蒙的开源版来收取版权费用。当然这权当一种补贴，就不要想着多大盈利了。
支棱起来 最后来谈一谈华为的困境。目前的华为缺乏支持他的企业。纯商业环境下最多也只有某个公司的几个app兼容一下鸿蒙，而且这种兼容并不能带来盈利。当然吆喝是赚到了。今天发布的“中部战区支持华为”，如果是真的，那也是有利有弊，弊就是直接把华为推向美帝的对立面了。在18年华为被制裁的时候，任正非的说法是“依然对美国抱有敬意”，而这次的军方支持如果是真的，就直接断绝了华为与大部分发达国家的生意了。当然目前国内倡导内循环，不知道军方能不能接得下这个需求。我还是觉得首先要从2B的政企作为切入点，再慢慢渗透，直接找军方这太极端了。多半是炒作或者浅层次的接触。
不管怎么样，希望他撑下去吧，我也希望看到一个新的框架出现，我也能混口饭吃呢（</description>
    </item>
    
    <item>
      <title>【转载】劳动仲裁日记</title>
      <link>/post/labor-arbitration-diary/</link>
      <pubDate>Wed, 17 Mar 2021 10:58:00 +0800</pubDate>
      
      <guid>/post/labor-arbitration-diary/</guid>
      <description>本文转载自：https://bbs.nga.cn/read.php?tid=22868311
背景介绍  公司规模：700人 公司位置：上海 公司性质：民办 个人岗位：非主营业务部门领导 工作情况：4月22日起恢复线下办公，此前均转为线上  第一部分：离职起因 3月6日 降薪通知
老板在微信群发布“降薪通知”，说是因为新冠疫情影响，成本提升收入下降，无力维持以前的工资水平。
看到通知后我稍等了下，我是我公司非主要业务部门的领导，所以不方便公开反对，也不方便先于主要业务部门站出来。
结果只有少数几人提出反对意见，老板做了简单安抚，翻来覆去就是一个意思“特殊时期，公司艰难，希望大家同甘共苦”
看到老板的意思后，我认为时机到了，立即写长文私聊表示了一个核心思想“可以缓不能降”，公司艰难可以理解，缓发工资毫无怨言，但只要没破产活了下来，总有一天是有钱的，必须要补上这才叫同甘共苦，只有同甘才可以共苦
老板表示收到，要董事会商量决定
3月15日 大幅度降薪
2月份工资发放(正常是每月8日发工资)，查帐后我发现降低了72%，立级找人事、财务以及老板核实，得到的答复为“不可能降这么多的，等我帮你查下”
3月20日 开始求职
没有回复，我主动再次询问，得到的答复“4月份回归线下办公后面谈”，此时我认为
 老板迟迟对我之前的反对意见不做回复 实际降薪幅度远超想象 这是故意拖时间  于是，当天就决定，这家公司不可久留，在朋友圈中发布求职意愿，求内推
3月21日 下家已定
一位朋友把他的朋友推荐给了我，是一个北京的创业公司老板，目前100人规模，承诺工资大约为目前的1.5倍，我们聊的不错，均表示等疫情过后详谈。
第二部分：斗争开始 4月16日 整个部门被裁
中午的时候，HRD通知：因5月17日合同到期，不再续签。
我表示好的，收到。
马上打开微信想联系之前聊的那位老板，但转念一想，现在这家公司有这么几个关键词“强行降薪”“回避问题”“裁撤不听话的非主营业务部门”，这一切都让我不得不怀疑是否可以和平分手。
于是我放下手机，打开电脑，全面学习《劳动法》，试图站在公司角度分析，如果我是老板，我不想给离职补偿，我应该怎么做？
4月17日 提前分析可能遇到的情况
经过了一个下午加一个晚上的学习，以及一个半夜的分析，凌晨6点大约得出了几个基本结论：
 是公司主动提出不续签的，但由于公司方提前一个月告知，因此我不能主张N+1补偿，只能主张N个月补偿，对我而言就是三个月工资，由于我工资超过上海三倍上限，因此按三倍上限计算 上海平均工资7832元，三倍，三个月，这笔补偿金就是70488，并不算少，公司会想办法压低价格，但这是法律规定，我不会让步，那么就需要从劳动法中找到公司可以不给的理由 第一个可能的理由就是严重违反劳动纪律，我想起来2019年发的通知，规定旷工累计3日可以无条件开除。而我三年来，虽然工作都会完成，但基本随缘打卡，从来不在乎，但2019年以前数据已清，我必须在4月份回归线下后认真打卡。 第二个可能的理由是无法胜任岗位，但这个简单，我可以拿出2018年公司发的优秀员工奖以及2019年发的优秀团队一等奖来反驳 第三个可能，公司改口，要求续签合同(后边细说) 第四个可能，转移资产，申请破产，换壳重生  而我也针对每一种情况想好了对策，虽然未必会开战，但一定做好全部准备，从此开始所有与公司方面的沟通均要录音，所有对话聊天记录均要备份保存，而原始聊天记录、线上工作证明等均要好好保存。
4月22日 第一次试探
线下复工第一天，如约与老板面谈降薪问题
老板如我所料，给出的回复就一个意思”所有人都降，你是非主营业务部门，按统一的公式显得更多，但没有问题，还有高管降低90%的“
我按照法律规定的录音证据规范，声明了时间、地点、对话双方身份，然后要求老板重复降薪公式，老板照做，并说可以申请劳动仲裁，但降薪是董事会的决定不能变更。
之后我立即进入内网，拉取一切与我有关的信息(例如出勤、工资构成等)作备份
这里我犯了个错误，我不应该先去谈，谈崩了之后再拉信息，万一对方反应迅速提前篡改信息我就会失去一项重要证据，所幸对方段位不高，我仍然顺利拿到全部数据。
第三部分：仲裁开始 5月13日 第二次试探
离职前最后一周，我去找HRD，试探离职补偿的问题，但HRD却问我”你怎么来了，噢对，你合同快到期了来续签的是吧？“，我就一脸懵，随即反应过来应该是希望我主动离职，他们4月16就告知我不续签了，应该猜到这么久的时间我应该找好下家了。
于是我坚定的说”不，老板说不跟我续签，疫情期间找工作也很难，我打算读博士去了“，HRD应该是被”读博士去了“给骗到了，毕竟疫情期间工作的确不好找，于是(装作)惊讶地说”啊？我怎么不知道，你坐一下我去问问老板“(你一个人力资源总监如果真的不知道这事就离谱了)
之后HRD再没出现，我坐到下班，回家。
5月14日 第一次交锋
最后一个工作日，再次找HRD，HRD表示确实决定不续签，然后就是双方第一次正式博弈
HRD：怎么打算？
我：(明知故问)什么怎么打算？</description>
    </item>
    
    <item>
      <title>获取信息的个人技巧和流程</title>
      <link>/post/get-information-skills/</link>
      <pubDate>Mon, 01 Feb 2021 11:58:00 +0800</pubDate>
      
      <guid>/post/get-information-skills/</guid>
      <description>很久之前写了一篇《我是如何获取信息的》，当时说要开坑讲讲方法论和技巧之类的东西，由于各种因素耽搁了。现在终于恢复常态，可以静下心来复盘总结一下了，也当是对自己的一次提升。权当抛砖引玉，如有不足之处欢迎交流。
前言 现在是互联网时代，互联网上浩如烟海的信息充斥着我们的视野和脑海，一不小心就迷失了。所以正确获取信息就是我们的一门必修课了，为什么说是必修呢，因为这不仅影响到我的学习，还影响到我们生活中的其他方面，比如看新闻、吃瓜、和别人撕逼等等，也是很有必要的，会帮助你树立正确的三观和立于不败之地。本篇文章的内容主要分这几部分：如何挑选和过滤信息渠道；如何自主寻找更多的信息；以及如何总结提炼和运用信息。
如何挑选过滤信息 正如前言所说，信息的来源是十分重要的，如果这一步出了问题，那么后面的其他步也不会好到哪里去。所以我们要把信息来源的甄别提到一个十分重视的地位。关于一些我认为可以接触的信息渠道，在上一篇《我是如何获取信息的》里面我已经提到一些，这里我要说的是几个原则：
 首先所有的渠道都不是永远可信的，渠道本身可能随着时间会新增、减少或者被替换 所有的渠道都有一定的无用信息。这里的无用指的是，在“功利性阅读”的情况下，有些信息我们没有必要去浏览。我们需要选择无用信息尽量少的渠道。而一旦你的目标更改，对于“无用”的定义改变，渠道也随之需要更换，这也印证了上一点。 所有的信息都需要我们反复的去印证，不能全信。在这个方法框架下没有完全的权威，一切基于独立思考。  下面说一些信息来源：对于我们的专业知识，比如我比较专注于IT类的知识，有些业内著名的网站是值得推荐的，像github，同时也有一些大学在线教程、著名IT公司、框架的开发者文档等。
另外就是非干货型的网站，一般是论坛类的地方，里面会有一些用户的思考和分享，这些对于开阔思路很重要。
基于订阅系统的信息渠道，比如RSS，邮件等，由于是针对我们个人的兴趣爱好进行了一次过滤，所以质量也比较高。
最后是群组类的渠道，对于越冷门的群组，其信息质量也相对较高。有一些群组人多起来渐渐的就最终变成吹水群，这时候我们就该要考虑放弃这个渠道了。
需要注意的是，对于一条信息，我们可以有多个不同渠道来进行对比和印证。比如我在群里看到了一个截图，我会从截图上的各种信息去找到对应的媒体来源，判断是否是真的；同时也会找到一系列同样的消息，可能包含更多原图没有的内容，从而帮助我们更好的判断事情。
如何自主寻找更多的信息 在找到适合我们的渠道以后就开始着手浏览信息了，对于信息的寻找我自己有一些独特的见解和方法，这里稍微分享一下：
全网搜索 对于全网搜索比如百度和谷歌，需要灵活运用其高级搜索功能。在搜索框下方有个工具条，里面包含了一些常用的高级搜索功能。有一些我个人比较常用的高级搜索功能，包括：排除某个网站（-csdn） 包含某个网站（site:www.zhihu.com） 限定搜索结果为某类文档（比如pdf）限定时间（针对某些新闻类）
站内搜索 除了全网搜索引擎之外，还有一个很强大的东西是站内搜索。比如著名的github，其站内搜索对于中文不够友好，但是如果我们灵活运用他提供的功能是可以很大的提升搜索效率。
比如限定语言类型，搜索某个用户的项目时限定是他创建的而不是fork的，等等。
对于微信公众号也有站内搜索，其“搜一搜”可以优先展示你关注的账号里面的信息，另外对于一个账号想要找他的历史文章，也可以打开他的主页，在右上角有个搜索按钮，就可以更精准的搜索他的文章。又比如对聊天记录的搜索（这里我要吐槽一下垃圾微信，被QQ完爆，QQ存在电脑上的聊天记录搜索是真的强大），可以很快的找到你想要的信息。
纵深型寻找 我不知道这是不是我独创的词，但是我这个方法应该有一些人会。
对于信息流类型的网站，其信息是一条条的，每一条都是一个账号发出的。当我们看到一篇文章时，里面写着“请看上期所说的XXX”，其实就很自然的去到他的个人主页里面，找到其历史文章的上一篇了。
另外如果在文章下面的讨论里面发现了你想要的问题，也可以去这些发言用户的主页找找有没有解决后的分享。
无目标寻找 很多时候我们是带着目标去找一些信息，但是其实想要更大限度的扩展视野，我们需要无目标的寻找。我想起当年小时候，我是个爱看书的孩子，但是我并不是每次都确定要买什么书了才去书店，而是在书店的书架上漫无目的的走马观花，看到有意思的书就拿起来深入看一下。
而在互联网时代，如果你掌握了我上面所说的方法，也是可以做到无目标寻找的。虽然网上信息那么多，但是我们可以借助站内搜索和纵深型寻找来做这件事。
举个例子：比如我找到了一篇博文，觉得作者很牛逼。我可以在他的博客上看看其他的文章。如果他没有贴个人介绍，我可以从某些文章里的github地址找到他的github主页，进而看看他的更多项目。另外我可以看看他star的项目，看看他fork的项目，看看他follow的人以及这些人的重要项目。这就是从一篇文章引发的一次风暴。
其实社交网站的“转发”功能也包含了这一逻辑，希望用户可以发现更多的有价值账号，进而关注他。不过社交网站的信息质量并不算很高，但是这种方法是可以运用到其他干货型网站的。
举两个例子 第一个是我在群里聊天，谈到一个框架，之前看过但是忘了名字了，只知道是腾讯的，做什么用的框架。首先第一步百度搜，没有找到。然后Google也没有找到。然后github站内搜索也没有找到。最终找到的方法是：先直接去找到腾讯在github上的开源org地址（这个地址是我能记住的，名字就是tencent，所以地址就是 https://github.com/tencent），然后在其名下查找项目。由于是我最近浏览过的项目，直接按默认的日期排序就能很容易的找到他了。
另外一个是我看到一个博客，知道他是静态博客，似乎是基于github issue 做的，想看看他的实现。但是网站上没有任何可以找到github地址的信息。于是我在github进行了一个站内搜索，关键字就是博客域名，由于这种博客一般都是用github page+自定义域名实现的，所以在github如果有项目就能找到他配的域名。果然就找到了我想要的项目。当然一个更为简单的方法是打开F12看请求，由于文章内容是基于gitHub issue的，所以一般都会请求一个github的仓库地址，这样就可以直接找到。
如何总结提炼和运用信息 接收信息以后，需要将其变为自己的一部分，也就是内化和升华。目前来说主要还是两个方法，一是交流，二是输出。这两者可以同时进行，也可以单独进行。交流的话主要还是各种社交媒体，社区分享，群组交流，线下聊天讨论，工作之余和同事互相讨论等等，而输出的话主要是将内容制作成作品，比如文章、视频等形式。我除了在这里写博文外，还会在社交媒体上发布一些短小的内容，有一些是随手而发的，有一些则是用电报频道进行历史存档，然后同步到社交媒体上面的。
参考文章 构建终身学习体系进行自我提升</description>
    </item>
    
    <item>
      <title>2020总结</title>
      <link>/post/2020-summary/</link>
      <pubDate>Sun, 10 Jan 2021 22:47:00 +0800</pubDate>
      
      <guid>/post/2020-summary/</guid>
      <description> 总览 1-5月：状态很不好。离职+家里蹲，外加上疫情影响，导致3个多月没有上班。期间也一直在面试，但是没有成功，心态很炸，整夜整夜的失眠。
6-12月：上了班。第一次体会996，顿时联想到了精力问题，由于这家公司的同事都是和我差不多大或者比我大，所以看着他们干劲十足感觉自己太不应该了。这个问题并不是在讨论加班或者资本家之类的东西，而是在讨论如何保持充沛的精力，感觉今年得做出一些改变。
经济方面 由于换工作，工资涨了一波，虽然只上了6个月的班，但是总工资收入应该能接近去年全年了。同时开通股票账户，学习了一下股市的知识，虽然没有盈利，但是这是第一年，我觉得并不亏。另外基金账户盈利接近30个点，由于我本金不高所以实际收益不多，明年会加大投入。开始慢慢学习投资方面的知识，关注了一些公众号。
生活方面 老样子，单身狗一枚。不过由于心态的原因稍微添置了一些提升生活品质的物件，比如电动牙刷、无线鼠标、蓝牙键盘、无线耳机、颈椎按摩仪、通勤背包，开始定期补充零食、吃夜宵。由于公司位于长宁区，所以外卖消费和档次明显提高，没那么心疼钱了。希望外卖+夜宵能让我的体重上来。对了，开始抽烟，不过只在压力大的时候抽，没有瘾。大概半个月-20天一包。
娱乐方面 前几个月没上班的时候玩激战2，后面开始晕3D了——激战2这个游戏的3D视角超级灵敏，感觉不太适应。然后加上上班也就没玩了。下半年开始玩手游。支出也不大，肯定在3000以内。然后9月份跟朋友去了一趟黄山，算是几年来真正意义上的户外游。知道了同游怎样处理和同伴之间的计划和想法分配，知道了不该心疼钱。也算是一次很好的学习经历。
工作和技术方面 新公司学习了一波新技术和框架。主要是MVVM+DataBinding的架构，以及组件化架构。还有kotlin的全面使用和协程。积累了一些经验，学会如何在中型规范框架内进行协作，遵守框架规范同时尽量满足最佳实践，学会在追求最佳实践的过程中反复修改时消除不厌其烦的心态，多人协作时如何用个人力量推动团队进度。同时学生时代的粗心毛病暴露了出来，经常有粗心导致的bug。感觉需要改正。熬了一次夜，不是那种呆着没事干的熬，而是一直在思考和工作的熬。下半年开始和朋友一起备战新面试，稍微温习了一些知识。
社交方面 开始经常使用微信，加了一些新老朋友在聊天。现实里没有什么进展。希望明年能有一些改变。
目标和计划  开始用微信读书看一些书，非小说，各种类型的都可以。回归儿时的爱好，提升自己的气质。 学会好好说话，思维不要被中文互联网社交圈污染。但是互联网社交圈还是要接触，不能落后于时代。 开始用前辈的眼光看世界，不要对年轻人（指95-05后）所喜欢的、流行的东西嗤之以鼻。学会理解和接受它们，并尝试找到赚钱的机会。 运动，提升身体素质，希望学会游泳或者一门球类。 基金盈利保持30%。 减少无意义的陌生人社交，增大熟人社交，并增大熟人数量。 技术上达到中高级的水准，搞清楚是否要考研，如果要的话在年底前争取复习完高中英语和数学。  </description>
    </item>
    
    <item>
      <title>加速博客静态资源</title>
      <link>/post/speed-up-my-blog/</link>
      <pubDate>Thu, 02 Jan 2020 00:48:54 +0800</pubDate>
      
      <guid>/post/speed-up-my-blog/</guid>
      <description>闲来无事折腾了一下博客，发现打开速度比较慢。由于是静态博客，自从coding page挂了以后我就没折腾国内的全站线路了，反正整个网站的内容和功能都比较简单，没有加载特别多的文件，速度也就不慢，但是这个静态资源的加载还是可以进行一些优化。
首先是固定的静态资源，也就是css和js文件，这些可以直接使用CDN，我这里用的是Cloudflare的CDN，大部分的公共资源都可以找到，地址 https://cdnjs.com/ 。本来是用的国内的staticfile.org，但是好像有时候会抽风挂掉，好巧不巧我自己都遇上两三次了，所以直接就全部改掉了，感觉这个稳定一些。而且本来整站也没有做线路上的优化，CF在国内的速度也并不慢，只要资源的加载速度跟得上整站的速度就没问题了。
然后是图片，由于个人的强迫症所以图片都是储存在自己的github仓库里面的（丢到各种云储存上面有挂掉的风险，球球别嘲讽我的博客寿命了），但是github其实也是有一个可以加速的途径——那就是jsdelivr。地址在 https://www.jsdelivr.com/ ,也就是说所有位于github仓库上的文件全部都可以走这个cdn，这样会快很多。
jsdelivr的使用格式：https://cdn.jsdelivr.net/gh/{用户名}/{仓库名@分支名}/{文件路径}，分支名可以省略——如果你只有一个分支的话。使用以后我的图片基本上是秒开（国内没挂梯子的情况下）。
另外这里也可以找到各大主流js和css的资源，和CF的是同一种东西，也可以直接用。所以博客里面的所有图片类甚至是各种pdf、doc、二进制文件理论上都是可以走这个的（以后你想要下载某个仓库里的单个资源就可以用这种方法，或者给不懂技术的朋友发这种格式的地址来加快下载速度）。</description>
    </item>
    
    <item>
      <title>我是如何获取信息的</title>
      <link>/post/get-infomation/</link>
      <pubDate>Mon, 04 Nov 2019 22:53:04 +0800</pubDate>
      
      <guid>/post/get-infomation/</guid>
      <description>开这个坑主要是有两个原因：其一是互联网时代信息太庞杂和太碎片化，正确高效的获取信息已经成为我们这行的必备技能之一；再有一个就是我身边认识的有些人实在是在这方面真的很弱——即使他技术和成就都高于我。当然我也并不算是很强，相比那些非常自律、已经完全融入都市生活的工程师，半自由、全自由职业者，以及那些游离于科技和文学之间的媒体工作者，我仍然是这方面的婴儿。权当抛砖引玉，以后有缘再更新。
回忆 幸运的我从刚开始使用电脑，就比较敏锐的认识到了搜索技能的重要性，我的第一代方案是离线保存。无论什么软件 文档 资料，我都喜欢直接保存到电脑上，没事翻翻看看，整理文件夹的时候正好回忆，加重印象。后面开拓了浏览器战场，利用浏览器收藏夹保存网站，也是不定时整理（别觉得我会偷懒，实际上我整理的频率相当高）。
在刚进入开发行业的时候我几乎是从第一套方案开始重新走了一个轮回——因为我以前保存的那些东西在这个行业几乎都没啥用了。后面发现了这个行业的特点：信息源还是比较集中和高保真性（不过时，很少有虚假信息），所以我专注在热门站点的二次搜索结果上（这时候我的初代搜索技能也发挥了很大作用，感谢）。同时结合云笔记服务和订阅服务，最终形成了目前的方案。
现在 我的信息获取渠道有这些：
 浏览器（仍然是主力）
 云储存 云笔记（前者主要用来保存一些大体积资料）
 订阅
 网站
  关于浏览器的使用有如下几个技巧：
 搜索技能（后面会讲） 存一个页面并不只是这个页面的内容，也可能是这整个母站点。比如从一篇教程引申到整个教程网站，从一个视频引申到这个up主的所有作品，从一个github项目引申到这个开发者所有项目。 常整理，我的做法是建立一个temp目录，这个目录下是每天必看，该删的删，该移到其他地方也要移。有时想学一个东西，网址也会先存在这里，每天从这里打开。  云储存相信很多人都在用，没错就是类似百度网盘的那种玩意儿。我现在还没达到“都看”的境界，只能说多一个途径多一种可能吧。
云笔记我个人在用google keep，因为我写东西比较散，而且不喜欢复制大段的格式化文本（这种情况我会直接存收藏夹）。轻量级的google keep正好适合我
订阅分几种：邮件，订阅号。实质上都是一样的，都是被动接收推送，而且是经过筛选的，信息质量比较高。订阅的也不一定都看，有些是太忙，有些是经过筛选仍然不符合我需求。那么下面给出我认为比较好的一些订阅源，可能level不是很高，但是这个订阅列表本身也是会随着我的水平而更新的，现阶段我感觉我也就这样了：
 邮件订阅：码农周刊，SegmentFault，开源中国（没订阅github，这个后面说） 微信订阅：思哲与财富，infoQ，好奇心日报，傅老师 电报订阅：少数派，湾区日报，IPN播客网络，小破不入渠，Drakeets  关于网站没啥好说的，有些东西是和「搜索技能」联系在一起的。这里只列举：
 v2ex github（没错，这个东西可以每天都逛的，并不只是一个纯粹的资料站） B站 twitter  其他闲话 目标：能习惯英文阅读，可以看一看除代码之外的英文资料，比如reddit，twitter英文内容，Quora，Google Group某些项目反馈区和github issue区，以及一些英文的文档资料。
另一个目标：更加融入社会一些，虽然我已不看知乎这种纯娱乐化的东西，偶尔看看微博沙雕段子和在上面获取新闻，但是可以吸收一些诸如外包平台、各种聊车房娃投资的地方的信息。社交网络尽量用的自然一些。</description>
    </item>
    
    <item>
      <title>windows上的PDF软件——sumatraPDF</title>
      <link>/post/sumatra/</link>
      <pubDate>Fri, 20 Sep 2019 14:41:47 +0800</pubDate>
      
      <guid>/post/sumatra/</guid>
      <description>前两天我们测试同学发给我一个pdf，我一看足足有22m！
我问他怎么做出来的，他说用xmind导出的！
打开就是一页，里面是一张超大的树状图，类似这种：
大小呢，大概是4000x10000（高度一万多）的样子。
我用了很多工具，不是打开太卡 狂占资源，就是缩放达不到我的要求。
后来发现了一个好用的软件：sumatraPDF。看简介：
Sumatra Pdf是Krzysztof Kowalczyk所开发的轻量级PDF阅读器，类型为开放软件，开发者是Krzysztof Kowalczyk，可以后面网址下载安装版和携带版，同时还提供源码下载。
下载链接：https://www.sumatrapdfreader.org/free-pdf-reader.html
包很小，下载安装以后确实也很简介——甚至是简陋，有种九十年代的软件风格。但是胜在好用，确实够流畅，打开以后用任务管理器查看占用也是非常优秀。
行了，以后用他做主力pdf了。反正我也没有高级需求。</description>
    </item>
    
    <item>
      <title>推荐一个小巧好用的Git客户端-Fork</title>
      <link>/post/git-client-fork/</link>
      <pubDate>Thu, 08 Aug 2019 13:11:02 +0800</pubDate>
      
      <guid>/post/git-client-fork/</guid>
      <description>如题，简洁明了。官网：https://git-fork.com
他长这样：
拥有黑白双主题。无需注册。提供win mac 两种客户端。
值得一提的是，他的开发者是一男一女两夫妻。丈夫负责mac端，妻子负责win端。
我承认我酸了……</description>
    </item>
    
    <item>
      <title>另一个jdk下载地址，速度不错而且不需要注册</title>
      <link>/post/open-portable-jdk-download-page/</link>
      <pubDate>Tue, 06 Aug 2019 11:18:36 +0800</pubDate>
      
      <guid>/post/open-portable-jdk-download-page/</guid>
      <description>现在开始，下载jdk的oracle网站需要注册了。虽然也不是多麻烦的一件事，但是注册本身网速很慢，而且每次下载都要登录，这点很不爽。
后面找到了一个新的下载地址，来自Adobe提供的页面，地址公开——也就是无需注册，速度还不错。地址如下：
https://www.adobe.com/support/coldfusion/downloads.html
页面拉到底部，有java8 java11（两个比较稳定的版本）的各系统版本下载，包括linux windows mac osx都有提供。</description>
    </item>
    
    <item>
      <title>加速gradle编译的方案汇总集合</title>
      <link>/post/speedup-gradle-build/</link>
      <pubDate>Wed, 03 Jul 2019 10:54:29 +0800</pubDate>
      
      <guid>/post/speedup-gradle-build/</guid>
      <description>公司给我配的笔记本太卡了。
i5低压U，8G内存，机械硬盘。本来是联想办公本。拿来给我做开发，还是最占电脑资源的APP开发。我佛了
在条件不允许的情况下开始研究各种gradle编译加速方案。
我的知识还停留在早几年的时代，那时候配个gradle demon，搞个离线模式就差不多了，最多放个大招：跳过Test任务。代码如下：
allprojects { ...... //skip Test tasks gradle.taskGraph.whenReady { tasks.each { task -&amp;gt; if (task.name.contains(&amp;quot;Test&amp;quot;)) { task.enabled = false } } } }  这段代码现在依然可用。只不过对于我这种硬件资源极度紧缺的情况，满足不了需求了。需要进行改造。
经过各种搜索以后发现了现在的方案，主要在于修改全局的gradle.properties文件。内容如下：
## For more details on how to configure your build environment visit # http://www.gradle.org/docs/current/userguide/build_environment.html # # Specifies the JVM arguments used for the daemon process. # The setting is particularly useful for tweaking memory settings. # Default value: -Xmx1024m -XX:MaxPermSize=256m org.</description>
    </item>
    
    <item>
      <title>一个图片压缩工具</title>
      <link>/post/yet-another-picture-shrink-tool/</link>
      <pubDate>Mon, 27 May 2019 10:38:22 +0800</pubDate>
      
      <guid>/post/yet-another-picture-shrink-tool/</guid>
      <description>做android开发的时候经常会需要压缩图片，主要是为了缩减包体积。有很多人开发了很多工具，其中比较著名的一款是tinypng，这是一个在线工具，网址 https://tinypng.com 。
但是他也是有限制的，限制传入图片的数量和每张大小。
也有人根据现有的技术做了一些离线的工具，直接调用库来压缩，没有任何限制，效果也还不错。今天介绍一款名叫pngyu。
pngyu是一个本地软件，地址 http://nukesaq88.github.io/Pngyu/ ，可以看到这是一个github的开源项目，使用了pngquant 作为压缩引擎。
pngquant也是很知名的一个图片压缩算法，所以其效果是不用担心的，虽然是有损压缩，但是效果依然出众。 pngyu提供了mac和windows的版本，是离线软件，使用也很方便。
可以直接把图片拖到中央窗口，也可以点击左下角加号直接添加一个文件夹，这样可以对文件夹里的图片进行批量操作。这对于我们做android开发简直太方便了。
压缩完成以后默认是生成同名文件并覆盖同目录下的旧文件，你也可以点击custom 自定义命名规则和保存目录。</description>
    </item>
    
    <item>
      <title>Git 删除所有提交历史</title>
      <link>/post/git-delete-all-history/</link>
      <pubDate>Mon, 03 Sep 2018 20:20:09 +0800</pubDate>
      
      <guid>/post/git-delete-all-history/</guid>
      <description>有些git项目出于一些原因我们需要删除提交历史。
有如下场景：
不小心把配置文件的密钥等信息上传出去了又想撤回。
项目commit次数太多了，删除commit可以相当于清理一下repo，可以缩小体积
如果是单人的项目，这时候可以用命令：git push --force来完成。这样会覆盖上一次commit。
如果是想删除所有的提交历史，我们可以用以下的命令：
# 1. 创建全新的孤立分支 latest_branch git checkout --orphan latest_branch # 2. 暂存所有文件 git add -A # 3. 提交所有文件的修改到latest_branch git commit -am &amp;quot;del all history&amp;quot; # 4. 删除原来的master分支 git branch -D master # 5. 修改latest_branch分支名为master git branch -m master # 6. 强制更新远程服务器的master分支, 至此清空git所有历史 git push -f origin master  </description>
    </item>
    
    <item>
      <title>使用hugo和github pages 搭建静态站点</title>
      <link>/post/build-gh-pages-using-hugo/</link>
      <pubDate>Wed, 18 Jul 2018 18:49:36 +0800</pubDate>
      
      <guid>/post/build-gh-pages-using-hugo/</guid>
      <description>最近有点空了又开始折腾个人博客了，听闻hugo有上升的趋势，于是就去体验了一把。
hugo是用go语言编写的项目，帮助用户以很快的速度搭建静态站点。方式是和hexo一样，生成静态html文件。与hexo的区别在于，在达到千级别的文章数量以后，hexo的性能就跟不上了。又由于大火的go语言，所以hugo开始崭露头角。
hugo使用和环境搭建 这里以windows环境为例，并默认你已经有github账户和掌握基本的编程知识。
 先下载hugo https://github.com/gohugoio/hugo/releases ，选择自己对应的操作系统安装包 解压，把hugo.exe加入环境变量。  把hugo.exe放到C:\hugo\下 然后在环境变量的path环境变量中添加这个路径 然后在cmd中测试，输入命令hugo version  在你自己想要的目录下打开cmd输入hugo new site hugo-blog，hugo会自动生成一个hugo-blog文件夹 cd到目录下，cmd输入hugo hello.md，hugo会在content目录下新建一个hello.md文件。这就是写文章。里面的内容自己编辑，可能会带有draft=true的参数，表示这是一篇草稿。 cmd输入hugo -d在public目录生成静态站点文件，这里面的所有文件就是你要push到github page上的静态文件。也可以使用hugo -d blog自定义生成文件的路径为blog文件夹 cmd输入hugo serve就可以在 http://localhost:1313 进行本地预览。注意如果你的md文件是草稿，是看不到的，此时有2个办法：一个是删掉那一行，还有一个是使用hugo serve --buildDrafts命令 使用hugo serve -w命令可以进行实时预览，当文件保存以后，1313端口的本地页面会自动刷新  hugo自定义 主配置文件在config.toml里，可以自己修改host、网站标题、描述等
主题：自行搜索，或者去(https://themes.gohugo.io/ )自己挑一个。
主题下载以后解压，将主题文件夹整个放到根目录的themes 目录下，然后去根目录的config.toml下加一行： theme = &amp;quot;hyde&amp;quot;，我这里用的是hyde主题(https://github.com/spf13/hyde/)
以上内容的参考资料来自 这个网站
利用travis-ci自动部署到github page 正常情况下我们只需要hugo -d，然后把生成的文件全部push到 username.github.io仓库下就可以了。但是每一次这样做很不方便，于是就使用了持续集成。
我们先把整个hugo-blog目录也做成一个git仓库，我的地址： https://github.com/lzh77/hugo-blog
然后创建travis-ci所需的配置文件，如下： https://raw.githubusercontent.com/lzh77/hugo-blog/master/.travis.yml
你可以直接使用他，注意自己改成自己的 git用户名 和 github page 仓库地址。
配置文件中有一个GITHUB_TOKEN变量，我们需要自己申请一个token用于travis-ci：
 到 https://github.com/settings/tokens 选择access tokens，新建一个，权限选择除了delete_repo以外的全部。复制下它，因为返回以后你自己也看不到它了，只能重建一个。  进入 https://travis-ci.</description>
    </item>
    
    <item>
      <title>Hugo Markdown 渲染示例</title>
      <link>/post/hugo-render-example/</link>
      <pubDate>Wed, 18 Jul 2018 12:56:12 +0800</pubDate>
      
      <guid>/post/hugo-render-example/</guid>
      <description>该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为GitHub Flavored Markdown。简称GFM，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。
###　Author:果冻虾仁
###　E-mail:Jelly.K.Wang@qq.com
===========================
目录  横线 标题 文本  普通文本 单行文本 多行文本 文字高亮 换行 斜体 粗体 删除线  图片  来源于网络的图片 GitHub仓库中的图片  链接  文字超链接  链接外部URL 链接本仓库里的URL  锚点 图片链接  列表  无序列表 有序列表 复选框列表  块引用 代码高亮 表格 表情  横线 ***、&amp;mdash;、___可以显示横线效果
标题 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 文本 普通文本 这是一段普通的文本
单行文本 Hello,大家好，我是果冻虾仁。  在一行开头加入1个Tab或者4个空格。
文本块 语法1 在连续几行的文本开头加入1个Tab或者4个空格。
欢迎到访 很高兴见到您 祝您，早上好，中午好，下午好，晚安  语法2 使用一对各三个的反引号：</description>
    </item>
    
    <item>
      <title>V2Ray入门教程</title>
      <link>/post/tuturial-of-v2ray/</link>
      <pubDate>Wed, 06 Jun 2018 16:01:21 +0800</pubDate>
      
      <guid>/post/tuturial-of-v2ray/</guid>
      <description>介绍 V2Ray是一个新的网络项目。提供了一整套的网络加速方案，包括客户端和服务端。他支持 Socks、HTTP、Shadowsocks等协议，也有自己开发的一套名为vmess的协议。由于我目前买的梯子已经开始抛弃SS/SSR协议，全面支持v2ray，我也去体验了一下。
官网：https://www.v2ray.com/
项目地址：https://github.com/v2ray
目前没有官方的GUI客户端，只有命令行客户端。GUI的客户端都是第三方开发的，比较热门的有V2RayN，我目前就在使用他。
本文主要讲解vmess协议下的使用教程。
使用教程  下载v2ray-core客户端：https://github.com/v2ray/v2ray-core 并解压 下载V2RayN客户端：https://github.com/2dust/v2rayN 将v2rayN.exe复制到第一步解压的目录下，双击运行。 添加节点：  填写详细信息，也可以直接导入链接，专用链接是以vmess://开头的  在后台托盘找到已经运行的客户端，右键开启系统代理，模式选择pac模式
 在参数设置里面可以设置本地端口，和是否开启局域网代理   注意点  v2ray-core默认只提供socks代理。 以上面一部设置的端口为例，如果上面设置的是1080，那么
V2RayN提供的http端口是1080+1
V2RayN提供的pac端口是1080+2
所以在telegram里面不要选错了   注：V2RayN新版本的默认端口从1080改为10808。加1和加2的规则不变，也就是最终端口分别变为10809和10810
 pac模式下，pac文件就在软件根目录： 可以自行编辑，规则跟SSR的一样。 另外可以在V2RayN的设置-pac设置里面自行添加需要走代理的域名。一行一个，换行添加，如下(注意英文逗号)：  v2ex.com,
cloudflare.com</description>
    </item>
    
    <item>
      <title>提高使用电脑和网络的效率的一些小技巧，持续更新中</title>
      <link>/post/tips-using-pc/</link>
      <pubDate>Sat, 02 Jun 2018 15:14:01 +0800</pubDate>
      
      <guid>/post/tips-using-pc/</guid>
      <description>github clone慢：首先fork仓库，然后登录码云，绑定你的github账户，然后在码云上可以把github的仓库同步到码云 最后在码云上clone。走国内网络，速度不用说了
 git 挂代理：
  git config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 git config --global --unset http.proxy git config --global --unset https.proxy git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39; git config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;   windows版sourcetree 跳过登录验证：https://www.jianshu.com/p/3478e2a214a1 进入%LocalAppData%\Atlassian\SourceTree\ 新建文件accounts.json，填入以下内容：
[ { &amp;quot;$id&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;$type&amp;quot;: &amp;quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&amp;quot;, &amp;quot;Authenticate&amp;quot;: true, &amp;quot;HostInstance&amp;quot;: { &amp;quot;$id&amp;quot;: &amp;quot;2&amp;quot;, &amp;quot;$type&amp;quot;: &amp;quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&amp;quot;, &amp;quot;Host&amp;quot;: { &amp;quot;$id&amp;quot;: &amp;quot;3&amp;quot;, &amp;quot;$type&amp;quot;: &amp;quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&amp;quot;, &amp;quot;Id&amp;quot;: &amp;quot;atlassian account&amp;quot; }, &amp;quot;BaseUrl&amp;quot;: &amp;quot;https://id.</description>
    </item>
    
    <item>
      <title>Android Studio 自带模拟器科学上网方法</title>
      <link>/post/cross-gfw-on-android-emulator/</link>
      <pubDate>Fri, 27 Apr 2018 15:28:25 +0800</pubDate>
      
      <guid>/post/cross-gfw-on-android-emulator/</guid>
      <description>以下一切都以windows为准
 首先确保你安装了SS或SSR，本机可以翻 然后来到模拟器
使用「移动网络」联网： 打开设置-网络和互联网-移动网络-接入点名称-点击接入点进行编辑
 在代理上面填写你的本机IP，端口1080——$$R 的默认代理端口，如果你改了也自行改动  然后来到$$R，右键打开选项设置，勾选「允许来自局域网的连接」并保存。  回到模拟器即可翻墙。
  使用WiFi联网：  wifi挂代理，其他步骤相同。   其他事项： 对于使用了新版的代理软件-如v2ray等，需要查看他开放的http代理端口。比如老版本的v2ray是1081，新版是10809。然后就是找到并开启支持局域网代理的开关。</description>
    </item>
    
    <item>
      <title>Flutter 浅尝辄止</title>
      <link>/post/start-using-flutter/</link>
      <pubDate>Wed, 28 Mar 2018 22:22:00 +0800</pubDate>
      
      <guid>/post/start-using-flutter/</guid>
      <description>官网和相关站点 资料 官网：(https://flutter.io/)
源代码：(https://github.com/flutter/flutter)
较完整的系列教程：中文教程
环境搭建和Hello World-以windows为例 官网已经有步骤了，简单总结一下
1. 在github上clone源码
2. 设置环境变量，使flutter命令生效
3. 安装intelliJ IDEA 2017.1以上版本（社区版即可），安装dart插件，在插件设置里设置好sdk路径
4. 配好Android环境
5. cd到源代码仓库根目录下，运行flutter doctor，期间需要梯子。cmd下如果使用的是ss或ssr，需要在cmd里面设置代理为127.0.0.1:1080 并使用全局模式，见(https://blog.csdn.net/lovelyelfpop/article/details/69586366) 。这个代理是临时的，一旦关闭cmd窗口就会没有代理。
5. 直到检查通过，运行flutter create myapp（注意选择合适的cmd目录创建项目）即可创建一个项目。注意已经自动生成IDEA项目的必须文件和.ignore，无需再编辑。
6. 用IDEA打开项目，一切正常的话可以直接点run运行项目，注意开启一个模拟器（此处用Android模拟器为例）
7. run项目的时候自己解决一下android的sdk gradle版本等问题，改包名，此处不再赘述。
8. 特别注意需要配置一下镜像地址（类似包管理的中心仓库），见(https://blog.csdn.net/hnwx7880/article/details/79600223)
关于dart和flutter 由于还没有深入学习这门语言，还没有体会到被夸赞的那些好处，说几个自己的体会
1. 一个方法里面传多个参数时候，可以随便写逗号，比如a(b,c,b,)这样不会报错
2. 异步写法使用async/await，返回的是Future&amp;lt;T&amp;gt;。一个简单封装的异步http写法如下：
Future&amp;lt;String&amp;gt; doGet(String url) async { String result; try { print(&#39;get url:$url&#39;); var httpClient = new HttpClient(); var request = await httpClient.getUrl(Uri.parse(url)); var response = await request.close(); if (response.statusCode == HttpStatus.</description>
    </item>
    
    <item>
      <title>使用mybatis的继承机制</title>
      <link>/post/mybatis-extend/</link>
      <pubDate>Thu, 08 Feb 2018 18:28:54 +0800</pubDate>
      
      <guid>/post/mybatis-extend/</guid>
      <description>起因：公司有一个产品化的项目，是使用一套自己总结的包含业务的抽象框架，根据不同的OEM厂商实现不同的provider。 在修改一个需求的时候，要求在原有的功能上进行修改，以实现个性化需求。现状如下： mapper类
public interface VinDao extends DaoMapper { T_Vin load(DaoParamWrapper wrapper); List&amp;lt;T_Vin_Mapping&amp;gt; loadVinMappings(DaoParamWrapper wrapper); }  mapper xml
&amp;lt;select id=&amp;quot;loadPartCodesByVin&amp;quot; resultType=&amp;quot;...&amp;quot;&amp;gt; do something... &amp;lt;/select&amp;gt; &amp;lt;select id=&amp;quot;load&amp;quot; resultType=&amp;quot;...&amp;quot;&amp;gt; do something... &amp;lt;/select&amp;gt;  要求：loadVinMappings的实现不变，load的实现需要改变。同时还要增加2个方法，是这个oem独有的，不能写在公用的mapperDao里面。
解决 第一反应：这还不简单，直接复制一份嘛 问题：工作量太大了。其实也不大，就是感觉做java肯定要想尽办法做到复用。
下一个方案：分开写，各自实现各自的。 问题：有公用的方法，如果分离成两个mapper的话也不行，因为框架既定，这个mapper就是做这两件事的。随意改动的话其他地方也要跟着改。
最终方案：使用mybatis的继承机制。参考文章 解决后的代码： mapper类
public interface OEMVinDao extends VinDao { Set&amp;lt;String&amp;gt; loadPartCodesByVin(String vin); @Override T_Vin load(DaoParamWrapper wrapper); List&amp;lt;T_OEM_Vin&amp;gt; loadByBottom(DaoParamWrapper wrapper); }  mapper xml
&amp;lt;select id=&amp;quot;loadPartCodesByVin&amp;quot; resultType=&amp;quot;...&amp;quot;&amp;gt; do something... &amp;lt;/select&amp;gt; &amp;lt;select id=&amp;quot;load&amp;quot; resultType=&amp;quot;.</description>
    </item>
    
    <item>
      <title>国内可删除账号的网站与服务清单，持续更新中</title>
      <link>/post/deletable-internet-account-in-china/</link>
      <pubDate>Thu, 25 Jan 2018 13:41:28 +0800</pubDate>
      
      <guid>/post/deletable-internet-account-in-china/</guid>
      <description>【重点】表示容易忽视或者很难找到入口的注意事项，并非全部注意事项。  微博：官方版APP，登录账号点击 我的-设置-账号与安全-微博安全中心-其他账号类问题-如何注销微博账号。 重点：需要三个月内无敏感操作（换绑手机、异常登录等等），还要解除第三方授权。方法：登录电脑网页版微博，点击个人中心-管理中心-我的应用-我正在使用的应用，一个个手动删除。
 百度：登录任一百度系手机APP（建议网盘，亲测有效）点击我的-账号设置-账号安全-账号注销 重点：需要刷脸（目测是假的，因为我刷脸秒过）
 简书：登录电脑网页版，在账号安全中直接删除。 重点：需要钱包没钱和文章全部删除掉。但是钱包要到一定数额才可以提现，所以很可能是死循环（此点是本人猜测）
 豆瓣：登录电脑网页版，在账号安全中直接删除。 重点：注销后，曾经绑定的邮箱和手机不可注册新号，但可绑定已有的其他账号（删除时会有提示）
 网易云音乐：
 网易通信证：没有直接注销的方法，如果连续180天未使用系统会自动清除账号。参考官方的帮助
  其他更详细的参考资料: 少数派-为了响应工信部要求，我们整理了这些网络账户注销指南</description>
    </item>
    
    <item>
      <title>Gradle高级用法【2】-SourceSet</title>
      <link>/post/gradle-advanced-usage-sourceset/</link>
      <pubDate>Sun, 14 Jan 2018 14:24:07 +0800</pubDate>
      
      <guid>/post/gradle-advanced-usage-sourceset/</guid>
      <description>起因 fork了一个项目，准备用kotlin完全重写，但是又想提交在同一个项目上，而且不污染原作者的代码。于是研究了一下可行方案：
 git 新开一个分支，pass（其实是对git不熟……） 新开一个productFlavor  最后决定使用方案2。话不多说，方案详细是这样的：
新开一个productFlavor，使用不同的SourceSet装载自己的一份完整代码，包括核心（src）、资源（res，assets）、清单（manifest.xml）。使用姿势大概是这样的：
在app的build.gradle文件中：
android { ... sourceSets { main { manifest.srcFile &#39;AndroidManifest.xml&#39; java.srcDirs = [&#39;src&#39;] resources.srcDirs = [&#39;src&#39;] aild.srcDirs = [&#39;src&#39;] renderscript.srcDirs = [&#39;src&#39;] res.srcDirs = [&#39;res&#39;] assets.srcDirs = [&#39;assets&#39;] } kotlin { java.srcDirs = [&#39;src-dev&#39;] } } }  其中的定义见代码，这里略过。
我的踩坑记录 一开始我的配置是这样的
sourceSets { kotlin { manifest.srcFile &#39;src/main/KotlinAndroidManifest.xml&#39; java.srcDirs = &#39;src/main/kotlin&#39; res.srcDirs = &#39;src/main/res-kotlin&#39; } } productFlavors { kotlin {} }  目录结构： 看上去很完美。</description>
    </item>
    
    <item>
      <title>关于Android Studio和gradle日常操作的一些坑的记录</title>
      <link>/post/problems-using-as-gradle/</link>
      <pubDate>Fri, 05 Jan 2018 17:36:44 +0800</pubDate>
      
      <guid>/post/problems-using-as-gradle/</guid>
      <description> run项目，弹框出现 ADB Install Fails With INSTALL_FAILED_TEST_ONLY，安装失败
解决办法：run的启动选项里面的install Flags 填上参数 -t 再不行就关闭instant run 参考链接
 run项目报错：Error:This Gradle plugin requires Studio 3.0 minimum
解决办法：gradle.properties中加一行 android.injected.build.model.only.versioned = 3 参考链接
 run项目需要下载新的sdk，下载失败报错：Failed to read or create install properties file
解决办法：我是win系统，进入sdk目录下发现需要权限（我的sdk目录是自己新建的文件夹，不存在权限问题） 然后我就管理员运行AS，解决了 参考链接
 查看源码时，显示注释非常慢，按快捷键Ctrl+Q也很慢，甚至不显示
解决办法：在win系统中，C:\Users\admin\.AndroidStudio2.3\config\options\jdk.table.xml中，查找注释需要的在线链接：
&amp;lt;root type=&amp;quot;simple&amp;quot; url=&amp;quot;http://developer.android.com/reference/&amp;quot;&amp;gt;  全部替换为
&amp;lt;root type=&amp;quot;simple&amp;quot; url=&amp;quot;http://developer.android.google.cn/reference/&amp;quot;&amp;gt;  注意每个api都有一条，需要全部替换。
参考链接
  </description>
    </item>
    
    <item>
      <title>Kotlin尝鲜</title>
      <link>/post/start-using-kotlin/</link>
      <pubDate>Tue, 02 Jan 2018 11:28:42 +0800</pubDate>
      
      <guid>/post/start-using-kotlin/</guid>
      <description>最近稍微抽空看了下kotlin，总的来说用起来还是不错的，因为没有细细去学习，所以只了解了最基本的用法。
使用起来和java的语法大同小异，不过有一些比较有意思的特性，可以减小代码量和使代码更优雅。
其实说白了就是语法糖，然而架不住大家就喜欢，哎
用的好的话，确实可以减少代码量，提高开发效率。 所以下面就来看看kotlin的语法糖奇技淫巧吧
data类 java的pojo类实际上就是一大堆胶水代码，极大的阻碍了开发速度的提升。虽然有各种各样的自动生成，但是总觉得原生支持才带劲
例子：
data class User(var name:String?,var id:Long)  一行搞定，自动重写了如下方法：
 equals()/hashCode() toString()方法 componentN()方法 copy()方法  基本上一行解决，非常简洁。 并且得益于这个代码量，可以把一个项目里所有的pojo类写在一个.kt文件下，还不是美滋滋？
什么，你说get/set？开玩笑，kotlin的类默认可是public的，直接赋值就完事了
when 例子：
override fun onClick(v: View?) { when (v!!.id) { R.id.btn_login -&amp;gt; doLogin() R.id.agreement_check_box -&amp;gt; btnLogin.isEnabled = agreementCheckBox.isChecked } }  逻辑类似于java里面的switch case，不同之处在于 使用范围更广，比如可以用来判断类型
when (a) { is String -&amp;gt; ... is Date -&amp;gt; ... }  还可以用来返回值
val res = when { s == null -&amp;gt; null s.</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>